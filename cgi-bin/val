#!/usr/bin/perl
#
# $Id$
#

# local configuration.
require "/usr/local/dns-manager/conf/config";
require "$DNSLIB/misc.pl";
require "$DNSLIB/whois.pl";
require "$DNSLIB/cgi.pl";
require "$DNSLIB/auth.pl";
require "$DNSLIB/requests.pl";

&zauth_read;

$date=`date +%y%m%d`; chop $date;

sub getmd5 {
  local ($file) = $_[0];
  local ($mymd5);
  if (!open(MD5, "$MD5PATH < $file |")) {
    return "";
  } else {
    if (!($mymd5 = <MD5>)) {
      close(MD5);
      return;
    } else {
      chop $mymd5;
      close(MD5);
      return $mymd5;
    }
  }
}

sub dowhoisform {
    local ($server, $request, $label) = ($_[0], $_[1], $_[2]);
    $server =~ s/ /+/g;
    $request =~ s/ /+/g;
    print "<A HREF=\"$WHOISCGI?server=$server&request=$request\">$label</A>\n";
}

sub dolocalwhoisform {
    local ($request) = $_[0];
    print "Whois \"$request\" at ";
    &dowhoisform($WHOISHOST, $request, "EU.org");
    print "<BR>\n";
}

sub dowhoisforms {
    local ($request) = $_[0];
    print "Whois \"$request\" at ";
    &dowhoisform($WHOISHOST, $request, "EU.org");
    &dowhoisform("whois.ripe.net", $request, "RIPE");
    &dowhoisform("whois.internic.net", $request, "InterNIC");
    print "<BR>\n";
}

sub dodir {
  local (@dirlist) = &rq_list();
  local ($foundone) = 0;

  local ($rq);

  print "\n";

  foreach $rq (@dirlist) {
    local ($error, $replyto, $action, $domain, $lang, $state)
	= &rq_get_info($rq, $ENV{'REMOTE_USER'});

    if (!$error) {
      $foundone = 1;

      if ($action eq 'N') {
	$action = "New       ";
      } elsif ($action eq 'M') {
	$action = "Modify    ";
      } elsif ($action eq 'MZ') {
	$action = "Mod Zone  ";
      } elsif ($action eq 'MC') {
	$action = "Mod Contact";
      } elsif ($action eq 'D') {
	$action = "DEL";
      }
      if ($state eq 'Open') {
        print "<A HREF=\"$ENV{'SCRIPT_NAME'}?action=display\&rq=$rq\"><TT>$rq</TT></A> $action $lang $domain<BR>\n";
      } else {
        print "<A HREF=\"$ENV{'SCRIPT_NAME'}?action=display\&rq=$rq\"><TT>$rq</TT></A> $action $lang $domain ($state)<BR>\n";
      }
    }
  }
  if (!$foundone) {
      print "Sorry, no request found...<BR>\n";
  }
}

sub dostate {
  local ($rq, $newstate) = ($_[0], $_[1]);

  local ($error, $replyto, $action, $domain, $lang, $state)
	= &rq_set_state($rq, $ENV{'REMOTE_USER'}, $newstate);

  if ($error) {
    print "Error: $error.<P>\n";
  } else {
    print "State changed from $state to $newstate.<P>\n";
  }
}

sub doinfo {
  local ($rq) = $_[0];

  local ($error, $replyto, $action, $domain, $lang, $state, $dns, $dbrecords)
	= &rq_get_info($rq, $ENV{'REMOTE_USER'});
  if ($error) { print "Error: $error.<P>\n"; return; }

  $ENV{'LANG'} = $lang;
  do "$DNSCONF/msg-val";

  if (!open(SMU, "|$SENDMAIL -t")) {
    print "Unable to send mail.<P>\n";
    return;
  }

  print SMU $VALHEADERS, $MSG_ADDR;
  printf SMU $MSG_SUBIN, $content{'rq'}, $domain;
  print SMU "To: $replyto\n\n";
  printf SMU $MSG_BDYIN, $content{'rq'}, $domain, $content{'reason'};
  print SMU $MSG_BYE;

  close(SMU);

  if ($? != 0) {
    print "<STRONG>sendmail returned an error !</STRONG><P>\n";
  }
}

sub doreject {
  local ($rq) = $_[0];

  local ($error, $replyto, $action, $domain, $lang, $state, $dns, $dbrecords)
	= &rq_get_info($rq, $ENV{'REMOTE_USER'});
  if ($error) { print "Error: $error.<P>\n"; return; }

  $ENV{'LANG'} = $lang;
  do "$DNSCONF/msg-val";

  if (!open(SMU, "|$SENDMAIL -t")) {
    print "Unable to send mail.<P>\n";
    return;
  }

  printf SMU $VALHEADERS, $MSG_ADDR;
  printf SMU $MSG_SUBRJ, $content{'rq'}, $domain;
  print  SMU "To: $replyto\n\n";
  printf SMU $MSG_BDYRJ, $content{'rq'}, $domain, $content{'reason'};
  print  SMU $MSG_BYE;

  close(SMU);
  if ($? != 0) {
    print "<STRONG>sendmail returned an error !</STRONG><P>\n";
    print "Request kept.\n";
  } else {
    &rq_remove($rq, $ENV{'REMOTE_USER'});
    print "End of processing.<P>\n";
  }
}

sub doaccept {
  local ($rq) = $_[0];

  local ($error, $replyto, $action, $domain, $lang, $state, $dns, $dbrecords)
	= &rq_get_info($rq, $ENV{'REMOTE_USER'});
  if ($error) { print "Error: $error.<P>\n"; return; }

  $ENV{'LANG'} = $lang;
  do "$DNSCONF/msg-val";

  if (!open(SMU, "|$SENDMAIL -t")) {
    print "Unable to send mail.<P>\n";
    return;
  }

  print  SMU $VALHEADERS;
  printf SMU $MSG_SUBAC, $content{'rq'}, $domain;
  print  SMU "To: $replyto\nCc: $user_mail\n\n";                
  printf SMU $MSG_BDYAC, $content{'rq'}, $domain;

  if ($action eq 'M' || $action eq 'MZ' || $action eq 'D') {
    print SMU $MSG_BDYZD;
    if (!open(AZ, "$AZPATH -a show -u$ENV{'REMOTE_USER'} $domain 2>&1 |")) {
      print SMU $MSG_NOREC;
      print "<STRONG>Unable to show existing records.</STRONG><P>\n";
    } else {
      while (<AZ>) { print SMU $_; }
      close(AZ);
      print SMU "\n";
    }
  }
  if ($action eq 'D') {
    if (!open(AZ, "$AZPATH -a delete -u$ENV{'REMOTE_USER'} $domain 2>&1 |")) {
      print "<STRONG>Unable to delete zone records.</STRONG><P>\n";
    } else {
      close(AZ);
      if ($? != 0) {
	print "<STRONG>Error when trying to delete zone records.</STRONG><P>\n";
      }
    }
  } elsif ($action eq 'N' || $action eq 'M' || $action eq 'MZ') {
    print SMU $MSG_BDYZI;
    if (!open(AZ, "| $AZPATH -a $action -u$ENV{'REMOTE_USER'} $domain")) {
      print SMU $MSG_NOINS;
      print "<STRONG>Unable to insert records.</STRONG><P>\n";
    } else {
      print AZ $dns;
      print SMU $dns;
      close (AZ);
      if ($? != 0) {
	print "<STRONG>Error when trying to insert records.</STRONG>\n";
      }
      print SMU "\n";
    }
  }
  if ($action eq 'N' || $action eq 'M' || $action eq 'MC') {
    print SMU $MSG_BDYWI;
    local ($line);
    foreach $line (split('\n', $dbrecords)) {
      if ($line =~ /^([a-zA-Z0-9-]*):\s*(.*)$/) {
	  if ($1 eq "CHANGED") { $line = "changed: $user_mail $date"; }
	  elsif ($1 eq "MNT-BY") { $line = "mnt-by:  $user_mntby"; }
      }
      print SMU $line."\n";
    }
    print SMU "\n";
  }

  print SMU $MSG_OKBYE;
  close(SMU);
  if ($? != 0) {
    print "<STRONG>sendmail returned an error !</STRONG><P>\n";
    print "Request kept.\n";
  } else {
    &rq_remove($rq, $ENV{'REMOTE_USER'});
    print "End of processing.<P>\n";
  }
}

sub dodisplay {
  local ($rq) = $_[0];

  local ($error, $replyto, $action, $domain, $lang, $state, $dns, $dbrecords)
	= &rq_get_info($rq, $ENV{'REMOTE_USER'});
  if ($error) { print "Error: $error.<P>\n"; return; }

  $ENV{'LANG'} = $lang;
  do "$DNSCONF/msg-val";

  if ($action eq 'N' || $action eq 'M' || $action eq 'MZ') {
    print "<HR><H2>Records to be inserted in zone file:</H2><PRE>\n";
    print $dns;
    print "</PRE>\n";
  }

  if ($action eq 'N' || $action eq 'M' || $action eq 'MC') {
    $nh = "";
    print "<HR><H2>Records to be inserted in WHOIS base:</H2><PRE>\n";

    local ($line);
    foreach $line (split('\n', $dbrecords)) {
      if ($line =~ /^([a-zA-Z0-9-]*):\s*(.*)$/) {
	  if ($1 eq "CHANGED") { $line = "changed: $user_mail $date"; }
	  elsif ($1 eq "MNT-BY") { $line = "mnt-by:  $user_mntby"; }
	  elsif ($1 eq "nic-hdl" && $nh1) { $nh2 = $2; }
	  elsif ($1 eq "nic-hdl") { $nh1 = $2; }
	  elsif ($1 eq "tech-c") { $tc = $2; }
	  elsif ($1 eq "admin-c") { $ac = $2; }
	  elsif ($1 eq "person" && $pn1) { $pn2 = $2; }
	  elsif ($1 eq "person") { $pn1 = $2; };
      }
      $line =~ s/>/&gt;/g; s/</&lt;/g;
      print $line."\n";
    }
    print "</PRE><HR>\n";

    #
    # Local form only for whois on domain name
    #
    &dolocalwhoisform($domain);
    #
    # Forms for whois on NIC handles
    #
    if ($nh1) { &dowhoisforms($nh1); }
    if ($nh2 && $nh1 ne $nh2) { &dowhoisforms($nh2); }
    #
    # Forms for whois on technical/admin contacts and person names
    #
    if ($tc && $tc ne $nh1 && $tc ne $nh2)
	{ &dowhoisforms($tc); }
    if ($ac && $ac ne $tc && $ac ne $nh1 && $ac ne $nh2)
	{ &dowhoisforms($ac); }
    if ($pn1 && $pn1 ne $tc && $pn1 ne $ac)
	{ &dolocalwhoisform($pn1); }
    if ($pn2 && $pn2 ne $pn1 && pn2 ne $tc && pn2 ne $ac)
	{ &dolocalwhoisform($pn2); }
  }

  if ($action eq 'MZ' || $action eq 'D' || $action eq 'M') {
    print "<HR><H2>Records to be deleted from zone file:</H2><PRE>\n";
    if (!open(AZ, "$AZPATH -a show -u$ENV{'REMOTE_USER'} $domain 2>&1 |")) {
      print "Unable to show existing records.\n";
    } else {
      while (<AZ>) {
	s/</&lt;/g;
	s/>/&gt;/g;
	print;
      }
      close(AZ);
    }
    print "</PRE>\n";
  }

  if ($action ne 'N') {
    print "<HR><H2>Current whois records for domain:</H2>\n";
    &whois_html($WHOISHOST, $domain);
  }

#  $mymd5 = &getmd5($rq);
#
#  if (!$mymd5) {
#    print "<STRONG>Unable to compute MD5 for \"$rq\"</STRONG><P>\n";
#  }

  print "<HR>\n";

  if ($state ne 'WaitAck') {
    $act='accept';
    print "<FORM ACTION=\"$ENV{'SCRIPT_NAME'}\" METHOD=\"POST\">\n";
#    print ":$mymd5:$ENV{'REMOTE_USER'}:$act:$rq<BR>\n";
#    print "<INPUT NAME=\"md5val\" SIZE=34> MD5<BR>\n";
    print "<INPUT NAME=\"action\" TYPE=\"hidden\" VALUE=\"$act\">\n";
    print "<INPUT NAME=\"rq\" TYPE=\"hidden\" VALUE=\"$rq\">\n";
    print "<INPUT TYPE=\"submit\" VALUE=\"Accept and mail to $replyto\">\n";
    print "</FORM>\n";

    print "<P>\n";

    $act='setanswered';
    print "<FORM ACTION=\"$ENV{'SCRIPT_NAME'}\" METHOD=\"POST\">\n";
    print "<INPUT NAME=\"action\" TYPE=\"hidden\" VALUE=\"$act\">\n";
    print "<INPUT NAME=\"rq\" TYPE=\"hidden\" VALUE=\"$rq\">\n";
    print "<INPUT TYPE=\"submit\" VALUE=\"Set state = Answered\"><BR>\n";
    print "(to mark the request as waiting for more details from the requester)<BR>\n";
    print "</FORM>\n";

    print "<P>\n";

    $act='reject';
    print "<FORM ACTION=\"$ENV{'SCRIPT_NAME'}\" METHOD=\"POST\">\n";
    print "<INPUT TYPE=\"submit\" VALUE=\"Reject and mail to $replyto\"><BR>\n";
    print "Reason:<TEXTAREA NAME=\"reason\" ROWS=10 COLS=77></TEXTAREA>\n";
    print "<INPUT NAME=\"action\" TYPE=\"hidden\" VALUE=\"$act\">\n";
    print "<INPUT NAME=\"rq\" TYPE=\"hidden\" VALUE=\"$rq\">\n";
    print "</FORM>\n";

    print "<P>\n";
  } else {
    print "(request not yet confirmed by user)<P>\n";
  }

#  $act='info';
#  print "<FORM ACTION=\"$ENV{'SCRIPT_NAME'}\" METHOD=\"POST\">\n";
#  print "<INPUT TYPE=\"submit\" VALUE=\"Ask more info to $replyto\"><BR>\n";
#  print "Reason:<TEXTAREA NAME=\"reason\" ROWS=10 COLS=77></TEXTAREA>\n";
#  print "<INPUT NAME=\"action\" TYPE=\"hidden\" VALUE=\"$act\">\n";
#  print "<INPUT NAME=\"rq\" TYPE=\"hidden\" VALUE=\"$rq\">\n";
#  print "</FORM>\n";
#
#  print "<P>\n";

  $act='delete';
  print "<FORM ACTION=\"$ENV{'SCRIPT_NAME'}\" METHOD=\"POST\">\n";
  print "<INPUT NAME=\"action\" TYPE=\"hidden\" VALUE=\"$act\">\n";
  print "<INPUT NAME=\"rq\" TYPE=\"hidden\" VALUE=\"$rq\">\n";
  print "<INPUT TYPE=\"submit\" VALUE=\"Delete quietly\">\n";
  print "</FORM>\n";
}

sub getuser {
  local ($remuser) = $_[0];
  local ($user, $pass, $mntby);

  if (!open(UP, $PASSFILE)) {
	return;
  }
  while (<UP>) {
	next if /^#/;
	chop;
	($user, $pass, $email, $mntby) = split(/:/);
	if ($user eq $remuser) { close UP; return ($pass, $email, $mntby); }
  }
  close (UP);
  return;
}

sub checkmd5 {
  local ($string, $gotmd5) = @_;

  if ($string !~ /^[a-zA-Z0-9\-\/;!:]+$/) {
	print "<STRONG>Illegal characters in MD5 string $string.</STRONG><P>\n";
	return 0;
  }

  if (!open(MD5, "(echo \'$string\') | $MD5PATH |")) {
    print "<STRONG>Cannot compute MD5: $!</STRONG><P>\n";
  } else {
    if (!($mymd5 = <MD5>)) {
      print "<STRONG>Cannot compute MD5</STRONG><P>";
    } else {
      chop $mymd5;
    }
  }
  close(MD5);
  return $mymd5 eq $gotmd5;
}

print "Content-Type: text/html\n\n<HTML><HEAD>";
print "</HEAD><BODY>\n";

&content;

if ($content{'rq'} && $content{'rq'} !~ /[a-zA-Z0-9-_]/) {
  print "Bad filename: $contents{'rq'}\n";
  print "</BODY></HTML>\n";
  exit;
} elsif (!$ENV{'REMOTE_USER'}) {
  print "You need to authenticate to use this script.\n";
  print "</BODY></HTML>\n";
  exit;
} elsif (!chdir($VALDIR)) {
  print "Can't cd to $VALDIR: $!\n";
  print "</BODY></HTML>\n";
  exit;
}

($user_pass, $user_mail, $user_mntby) = &getuser($ENV{'REMOTE_USER'});

if (!$user_mail) {
  print "<STRONG>Cannot find user info for $ENV{'REMOTE_USER'}</STRONG><P>\n";
  print "</BODY></HTML>\n";
  exit;
}

if ($content{'action'} eq 'display') {
  &dodisplay($content{'rq'});
} elsif ($content{'action'} eq 'reject') {
  &doreject($content{'rq'});
} elsif ($content{'action'} eq 'info') {
  &doinfo($content{'rq'});
  &dostate($content{'rq'}, "Answered");
} elsif ($content{'action'} eq 'setanswered') {
  &dostate($content{'rq'}, "Answered");
} elsif ($content{'action'} eq 'accept') {
#  if (&checkmd5("$user_pass:".&getmd5($content{'rq'}).
#		":$ENV{'REMOTE_USER'}:accept:$content{'rq'}",
#		$content{'md5val'})) {
    &doaccept($content{'rq'}, $user_mail);
#  } else {
#    print "The MD5 you have provided is incorrect, or the file has been deleted.<P>\n";
#  }
} elsif ($content{'action'} eq 'delete') {
  if (!&rq_remove($content{'rq'}, $ENV{'REMOTE_USER'})) {
    print "Unable to delete $content{'rq'}: $!<P>\n";
  } else {
    print "Deleted $content{'rq'}<P>\n";
  }
} else {
    &dodir();
}

print "</BODY></HTML>\n";
