-- $Id$

CREATE LANGUAGE "plpgsql";

--
-- DNS database
--

-- id lookup table for RR types
CREATE TABLE rrtypes (
	id SERIAL PRIMARY KEY,
	label VARCHAR(10) UNIQUE
);
-- id lookup table for admins
CREATE TABLE admins (
	id SERIAL PRIMARY KEY,
	login VARCHAR(16) UNIQUE
);

-- zone table
CREATE TABLE zones (
	id SERIAL PRIMARY KEY,
	name VARCHAR(255) UNIQUE,
	minlen INTEGER DEFAULT 4,
	maxlen INTEGER DEFAULT 63,
	ttl INTEGER DEFAULT 259200,
	updateserial BOOLEAN,
	soaserial INTEGER NOT NULL,
	soarefresh INTEGER DEFAULT 3600,
	soaretry INTEGER DEFAULT 1800,
	soaexpires INTEGER DEFAULT 604800,
	soaminimum INTEGER DEFAULT 259200,
	soaprimary VARCHAR(255) NOT NULL,
	soaemail VARCHAR(255) NOT NULL
);

-- lists allowed RR types for each zone
CREATE TABLE allowed_rr (
	id SERIAL PRIMARY KEY,
	zone_id INTEGER REFERENCES zones(id),
	rrtype_id INTEGER REFERENCES rrtypes(id),
	UNIQUE (zone_id, rrtype_id)
);

-- all domains in all zones
CREATE TABLE domains (
	id SERIAL PRIMARY KEY,
	name VARCHAR(64),
	registry_hold BOOLEAN DEFAULT FALSE,
	registry_lock BOOLEAN DEFAULT FALSE,
	internal BOOLEAN DEFAULT FALSE,
	zone_id INTEGER REFERENCES zones(id),
	registrar_id INTEGER,
	created_by INTEGER REFERENCES admins(id) DEFAULT 0,
	created_on TIMESTAMP(2) WITH TIME ZONE,
	updated_by INTEGER REFERENCES admins(id) DEFAULT 0,
	updated_on TIMESTAMP(2) WITH TIME ZONE,
	UNIQUE (name, zone_id)
);
CREATE INDEX domains_name_index ON domains(name,zone_id);

-- lists allowed administrators for each zone
-- not currently used
CREATE TABLE admin_zone (
	id SERIAL PRIMARY KEY,
	admin_id INTEGER REFERENCES admins(id),
	zone_id INTEGER REFERENCES zones(id),
	UNIQUE (admin_id, zone_id)
);

-- all resource records for all domains and zones
CREATE TABLE rrs (
	id SERIAL PRIMARY KEY,	-- used only for web framework access
	domain_id INTEGER REFERENCES domains(id),
	ttl INTEGER,
	rrtype_id INTEGER REFERENCES rrtypes(id),
	created_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW(),
	label VARCHAR(64),
	value VARCHAR(255)
);
CREATE INDEX rrs_domain_id_index ON rrs(domain_id);

-- keeping history

-- deleted domains
-- no UNIQUE (name, zone_id) constraint here:
-- a same domain can be created/deleted several times
CREATE TABLE domains_hist (
	id INTEGER PRIMARY KEY,
	name VARCHAR(64),
	zone_id INTEGER REFERENCES zones(id),
	registrar_id INTEGER,
	created_by INTEGER REFERENCES admins(id),
	created_on TIMESTAMP(2) WITH TIME ZONE,
	deleted_by INTEGER REFERENCES admins(id),
	deleted_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW()
);

-- deleted RRs
CREATE TABLE rrs_hist (
	domain_id INTEGER,
	ttl INTEGER,
	rrtype_id INTEGER REFERENCES rrtypes(id),
	created_on TIMESTAMP(2) WITH TIME ZONE NOT NULL,
	label VARCHAR(64),
	value VARCHAR(255),
	deleted_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW()
);

-- Functions

-- Return a free NIC handle for the given initials

CREATE OR REPLACE FUNCTION nexthandle(initials VARCHAR)
    RETURNS VARCHAR AS $nexthandle$
DECLARE
    num INT;
    upinitials VARCHAR;
BEGIN
	upinitials := UPPER(initials);
	-- lock the table to avoid an obvious race condition
	LOCK TABLE contacts IN ACCESS EXCLUSIVE MODE;
	-- Find the highest allocated handle with the same initials
	SELECT CAST(SUBSTRING(handle FROM '[0-9]+') AS INT)
	    INTO num
	    FROM contacts WHERE handle SIMILAR TO upinitials || '[0-9]+'
	    ORDER BY CAST(SUBSTRING(handle FROM '[0-9]+') AS INT)
	    DESC LIMIT 1;
        IF NOT FOUND THEN
	    num := 0;
        END IF;
	-- Build and return new handle
	RETURN upinitials || CAST(num + 1 AS VARCHAR);
END;
$nexthandle$ LANGUAGE plpgsql;

-- Triggers

CREATE OR REPLACE FUNCTION trig_domains()
    RETURNS TRIGGER as $trig_domains$
    BEGIN
	IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN
	    INSERT INTO domains_hist (
		id, name,zone_id, registrar_id,
		created_by, created_on, deleted_on)
	      VALUES (
		OLD.id, OLD.name, OLD.zone_id, OLD.registrar_id,
		OLD.created_by, OLD.created_on, NOW());
	END IF;
	IF TG_OP = 'DELETE' THEN
	    RETURN OLD;
	ELSE
	    RETURN NEW;
	END IF;
    END;
$trig_domains$ LANGUAGE plpgsql;

-- only useful on DELETE
CREATE TRIGGER trig_domains BEFORE DELETE ON domains
	FOR EACH ROW EXECUTE PROCEDURE trig_domains();

CREATE OR REPLACE FUNCTION trig_rrs()
    RETURNS TRIGGER as $trig_rrs$
    BEGIN
	IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN
	    INSERT INTO rrs_hist (
		domain_id,
		ttl, rrtype_id, label, value,
		created_on, deleted_on)
	      VALUES (
		OLD.domain_id,
		OLD.ttl, OLD.rrtype_id, OLD.label, OLD.value,
		OLD.created_on, NOW());
	END IF;
	IF TG_OP = 'DELETE' THEN
	    RETURN OLD;
	ELSE
	    RETURN NEW;
	END IF;
    END;
$trig_rrs$ LANGUAGE plpgsql;

CREATE TRIGGER trig_rrs BEFORE UPDATE OR DELETE ON rrs
	FOR EACH ROW EXECUTE PROCEDURE trig_rrs();

---------------------------------------------------------------------

--
-- Whois database
--

-- contact handling

CREATE TABLE contacts (
	id SERIAL PRIMARY KEY,
	handle varchar(20) UNIQUE,
	exthandle varchar(20),
	name varchar(255),
	email varchar(80),
	addr varchar(400),
	country char(2),
	phone varchar(40),
	fax varchar(40),
	passwd varchar(34),
	created_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW(),
	validated_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW(),
	updated_by varchar(64),
	updated_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW()
);
CREATE INDEX contacts_handle_index ON contacts(handle);
CREATE INDEX contacts_name_index ON contacts(lower(name));
CREATE INDEX contacts_exthandle_index ON contacts(exthandle);

-- mostly static table for mapping contact type integer to a string
-- see example rows below
CREATE TABLE contact_types (
	id SERIAL PRIMARY KEY,
	name varchar(20)
);

-- Secrets used to generate obfuscated email addresses for contacts
CREATE TABLE handle_secrets (
	secret varchar(32),
	expires TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW() + '1 week'
)

CREATE TABLE whoisdomains (
	id SERIAL PRIMARY KEY,
	fqdn VARCHAR(255) UNIQUE,
	created_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW(),
	updated_by varchar(64),
	updated_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW()
);
CREATE INDEX whoisdomains_fqdn_index ON whoisdomains(fqdn);

-- links domains with contacts
-- note that the contact type is part of this relation, allowing
-- a given contact record to be used as different contact types
CREATE TABLE domain_contact (
	id SERIAL PRIMARY KEY,	-- used only for web framework access
	whoisdomain_id INTEGER REFERENCES whoisdomains(id),
	contact_id INTEGER REFERENCES contacts(id),
	contact_type_id INTEGER REFERENCES contact_types(id),
	created_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW()
);
CREATE INDEX domain_contact_domain_id ON domain_contact(whoisdomain_id);

CREATE TABLE iso3166_countries (
	iso_id CHAR(2) PRIMARY KEY,
	lang CHAR(2),
	name VARCHAR(50)
);

-- history

-- deleted domain-contact associations
CREATE TABLE domain_contact_hist (
	whoisdomain_id INTEGER,
	contact_id INTEGER,
	contact_type_id INTEGER REFERENCES contact_types(id),
	created_on TIMESTAMP(2) WITH TIME ZONE,
	deleted_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW()
);
CREATE TABLE contacts_hist (
	contact_id INTEGER,
	handle varchar(20),
	exthandle varchar(20),
	name varchar(255),
	email varchar(80),
	addr varchar(400),
	country char(2),
	phone varchar(40),
	fax varchar(40),
	passwd varchar(34),
	created_on TIMESTAMP(2) WITH TIME ZONE,
	validated_on TIMESTAMP(2) WITH TIME ZONE,
	updated_by varchar(64),
	updated_on TIMESTAMP(2) WITH TIME ZONE,
	deleted_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW()
);
CREATE TABLE whoisdomains_hist (
	whoisdomain_id INTEGER,
	fqdn VARCHAR(255),
	-- this is the only place we can keep created_on for deleted domains
	created_on TIMESTAMP(2) WITH TIME ZONE,
	updated_by varchar(64),
	updated_on TIMESTAMP(2) WITH TIME ZONE,
	deleted_on TIMESTAMP(2) WITH TIME ZONE DEFAULT NOW()
);

-- Triggers

CREATE OR REPLACE FUNCTION trig_contacts()
    RETURNS TRIGGER as $trig_contacts$
    BEGIN
	IF TG_OP = 'UPDATE' THEN
	    IF NEW.updated_on IS NULL THEN
		-- INSERT case handled by a DEFAULT NOW() clause;
		-- we need to handle the UPDATE case by hand.
		NEW.updated_on := NOW();
	    END IF;
	END IF;
	IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN
	    INSERT INTO contacts_hist (
		contact_id, handle, exthandle,
		name, email, addr,
		country, phone, fax,
		passwd,
		created_on, validated_on,
		updated_by, updated_on, deleted_on)
	      VALUES (
		OLD.id, OLD.handle, OLD.exthandle,
		OLD.name, OLD.email, OLD.addr,
		OLD.country, OLD.phone, OLD.fax,
		OLD.passwd,
		OLD.created_on, OLD.validated_on,
		OLD.updated_by, OLD.updated_on, NOW());
	END IF;
	IF TG_OP = 'DELETE' THEN
	    RETURN OLD;
	ELSE
	    RETURN NEW;
	END IF;
    END;
$trig_contacts$ LANGUAGE plpgsql;

CREATE TRIGGER trig_contacts BEFORE UPDATE OR DELETE ON contacts
	FOR EACH ROW EXECUTE PROCEDURE trig_contacts();

CREATE OR REPLACE FUNCTION trig_domain_contact()
    RETURNS TRIGGER as $trig_domain_contact$
    BEGIN
	IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN
	    INSERT INTO domain_contact_hist (
		whoisdomain_id, contact_id, contact_type_id,
		created_on, deleted_on)
	      VALUES (
		OLD.whoisdomain_id, OLD.contact_id, OLD.contact_type_id,
		OLD.created_on, NOW());
	END IF;
	IF TG_OP = 'DELETE' THEN
	    RETURN OLD;
	ELSE
	    RETURN NEW;
	END IF;
    END;
$trig_domain_contact$ LANGUAGE plpgsql;

CREATE TRIGGER trig_domain_contact BEFORE UPDATE OR DELETE
	ON domain_contact
	FOR EACH ROW EXECUTE PROCEDURE trig_domain_contact();

CREATE OR REPLACE FUNCTION trig_whoisdomains()
    RETURNS TRIGGER as $trig_whoisdomains$
    BEGIN
	IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN
	    INSERT INTO whoisdomains_hist (
		whoisdomain_id, fqdn, created_on, deleted_on)
		VALUES (OLD.id, OLD.fqdn, OLD.created_on, NOW());
	END IF;
	IF TG_OP = 'DELETE' THEN
	    RETURN OLD;
	ELSE
	    RETURN NEW;
	END IF;
    END
$trig_whoisdomains$ LANGUAGE plpgsql;

CREATE TRIGGER trig_whoisdomains BEFORE UPDATE OR DELETE
	ON whoisdomains
	FOR EACH ROW EXECUTE PROCEDURE trig_whoisdomains();

---------------------------------------------------------------------
--
-- Database initialization
--

-- dummy "root" zone used as a placeholder to catch domains
-- for which we store only whois data
INSERT INTO zones (name, minlen, maxlen, soaserial, soaprimary, soaemail) VALUES ('', 1, 255, 2005113000, 'DUMMY', 'DUMMY');

INSERT INTO rrtypes values (1, 'NS');
INSERT INTO rrtypes values (2, 'MX');
INSERT INTO rrtypes values (3, 'A');
INSERT INTO rrtypes values (4, 'CNAME');
INSERT INTO rrtypes values (5, 'AAAA');
INSERT INTO rrtypes values (6, 'TXT');
INSERT INTO rrtypes values (7, 'SRV');
INSERT INTO rrtypes values (8, 'HINFO');
INSERT INTO rrtypes values (1000, 'WMX');

INSERT INTO contact_types VALUES (1,'technical');
INSERT INTO contact_types VALUES (2,'administrative');
INSERT INTO contact_types VALUES (3,'zone');
INSERT INTO contact_types VALUES (4,'registrant');

INSERT INTO admins (id,login) VALUES (0,'*unknown*');
INSERT INTO admins (id,login) VALUES (1,'pb');
INSERT INTO admins (id,login) VALUES (2,'gb');
INSERT INTO admins (id,login) VALUES (3,'fcb');
INSERT INTO admins (id,login) VALUES (4,'roberto');
INSERT INTO admins (id,login) VALUES (5,'thomas');
INSERT INTO admins (id,login) VALUES (6,'gdaci');
INSERT INTO admins (id,login) VALUES (7,'schaefer');
INSERT INTO admins (id,login) VALUES (8,'regnauld');
INSERT INTO admins (id,login) VALUES (9,'aj');
INSERT INTO admins (id,login) VALUES (10,'ck');
INSERT INTO admins (id,login) VALUES (11,'zop12');
INSERT INTO admins (id,login) VALUES (12,'patryk');
INSERT INTO admins (id,login) VALUES (13,'david');
INSERT INTO admins (id,login) VALUES (14,'rui');
INSERT INTO admins (id,login) VALUES (15,'rmc');
INSERT INTO admins (id,login) VALUES (16,'babafou');
INSERT INTO admins (id,login) VALUES (17,'sam');
INSERT INTO admins (id,login) VALUES (18,'vladek');
INSERT INTO admins (id,login) VALUES (19,'jaclavi');
INSERT INTO admins (id,login) VALUES (20,'pain');
INSERT INTO admins (id,login) VALUES (21,'ino');
INSERT INTO admins (id,login) VALUES (22,'jyb');
INSERT INTO admins (id,login) VALUES (23,'phil');
INSERT INTO admins (id,login) VALUES (24,'jld');
INSERT INTO admins (id,login) VALUES (25,'nh');
INSERT INTO admins (id,login) VALUES (26,'ricou');
INSERT INTO admins (id,login) VALUES (27,'hrusca');
INSERT INTO admins (id,login) VALUES (28,'benjamin');
INSERT INTO admins (id,login) VALUES (29,'olive');
INSERT INTO admins (id,login) VALUES (30,'erwan');
INSERT INTO admins (id,login) VALUES (31,'blaudez');
INSERT INTO admins (id,login) VALUES (32,'ob');
INSERT INTO admins (id,login) VALUES (33,'lc');
INSERT INTO admins (id,login) VALUES (34,'jertreg');

-- Permissions on DNS database
-- read-write
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE rrs TO root, www, nobody, autoreg;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE domains TO root, www, nobody, autoreg;
GRANT SELECT,UPDATE ON domains_id_seq TO root, www, nobody, autoreg;
GRANT SELECT,UPDATE ON TABLE zones TO root, www, nobody, autoreg;
-- append-only
GRANT INSERT,SELECT ON TABLE domains_hist,rrs_hist TO root, www, nobody, autoreg;
-- read-only
GRANT SELECT ON TABLE admins,allowed_rr,rrtypes TO root, www, nobody, autoreg;
GRANT SELECT ON TABLE contact_types TO whois;

-- Permissions on Whois database
-- read-write
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE contacts TO www, autoreg;
GRANT SELECT,UPDATE ON TABLE contacts_id_seq TO www, autoreg;
GRANT INSERT,SELECT,UPDATE,DELETE ON TABLE whoisdomains TO www, autoreg;
GRANT SELECT,UPDATE ON TABLE whoisdomains_id_seq TO www, autoreg;
GRANT INSERT,SELECT,DELETE ON TABLE domain_contact TO www, autoreg;
-- append-only
GRANT INSERT,SELECT ON TABLE contacts_hist TO www, autoreg;
GRANT INSERT,SELECT ON TABLE whoisdomains_hist TO www, autoreg;
GRANT INSERT,SELECT ON TABLE domain_contact_hist TO www, autoreg;
-- read-only
GRANT SELECT ON TABLE contact_types TO www, autoreg;
GRANT SELECT ON TABLE contacts, handle_secrets, whoisdomains, domain_contact TO whois;
GRANT SELECT ON TABLE iso3166_countries TO www, autoreg, whois;
GRANT SELECT ON TABLE contacts, handle_secrets TO postfix;
