$Id$

* Choose an installation path, for example /usr/local/dns-manager
  and cd to it.

* Create the following directories

	bin		scripts

	cgi-bin		CGI scripts

	conf		config files

	lib		Perl library files

	val		spool for correct requests
			should have write permission for the CGI scripts
			should have write permission for the mail scripts

	zones		for zone files, names in uppercase
			should have write permission for the CGI scripts
			should have write permission for the mail scripts

			THIS MUST BE DIFFERENT FROM THE ACTUAL FILES
			USED BY YOUR NAMESERVER !

	spool		temp spool for mail forms
			should have write permission for the mail scripts

  NOTE: CGI scripts run under the httpd process userid, generally "nobody".
	Mail scripts are run by sendmail generally as "daemon".
	There should be a clean way to handle this, for example
	a "autoreg" user. Someday I'll think about it.

* Create the following file

	log		Form POST log
			should have write permission for the CGI scripts
			no log for mails (put a Cc: or Bcc: in the replies)

* Copy the distributed directories to their local equivalent
	(conf, bin, lib)

* Edit conf/config for your system paths and mail addresses

* Adapt the path for /usr/local/bin/dns-manager/conf/config
	in every script (bin/*, cgi-bin/* and some of lib/*):

* Configure bin/soa with the master directory for named zone files, etc.

* Put the following in your HTTP server pages:

	html/form.html		-> user request form
	html/adm/index.html	-> admin help

   WARNING : the adm directory pages should be protected with a
	     .htaccess file ! An example is provided.

* Install the CGI scripts and update the Web pages accordingly:

	nph-dnsreq	(user request processing) -> /cgi-bin/nph-dnsreq

	val		-> in your HTML admin directory as val.cgi
			   (this implies that you enable this in your HTTP
			   server)

					OR

			   as /cgi-bin/dns/val

	whois		-> in your HTML admin directory as whois.cgi
			   (this implies that you enable this in your HTTP
			   server)

					OR

			   as /cgi-bin/dns/whois


   WARNING : the val script should be protected with a .htaccess in
	     the same directory !

* Add the following to your mail aliases. This is needed both for mail
  form processing and (Web or mail) registration acknowledges by the user.
  The different addresses are for different languages.

dns-manager:	"| /usr/local/dns-manager/bin/receive-mail"
dns-manager-fr:	"| /usr/local/dns-manager/bin/receive-mail -lfr"

* Create the required zone files (see the examples)
  The following special tokens are recognized at the top:

;! minlen 2
	-> minimum length allowed for a name

;! maxlen 24
	-> maximum length allowed for a name

;! type NS
;! type CNAME
;! type MX
;! type WMX
	-> allowable types of records for new requests.
	   WMX is a MX + a wildcard MX for the same domain.


   *IMPORTANT*NOTICE* when reusing existing files created by hand:

   The system tries to be clever when reading zone files
   and modifying them, but does not always succeed.

   It assumes that:
	- all records for a domain are on consecutive lines, INCLUDING
	  possible glue records;
	- a ';' in the first column separates domains.
   Edit your zone files to add ";" where needed to separate domains.

* Configure:
	conf/user-info	with your administrator info
   	conf/zones-auth	with your zones info
	your HTTP server's htpasswd file with the administrators passwords

* Step-by-step check of the configuration:

  1)	Create a new zone file, for example zones/DUMMY.ORG
	(use one of the sample files in zones/ as a template)
	and add it to conf/zones-auth with a list of authorized
	users. Note that the users here are only HTTP users and
	have absolutely no relation with Unix accounts.

	Try to access it with different usernames (authorized or not
	authorized for the zone):

		bin/access-zone -u username -t MX -a new TEST.DUMMY.ORG
		(type anything on stdin, then ^D)

		bin/access-zone -u username -t CNAME -a new TEST.DUMMY.ORG
		(type anything on stdin, then ^D)

		bin/access-zone -u username -t CNAME -a delete TEST.DUMMY.ORG


	etc.

  2) once this works, you can try the HTML forms to call the CGI scripts,
     and see if they correctly call access-zone to check the requested
     domain, and put accepted requests in val/

  3) then you can try the val script (called through the HTTP server) and
     see if it correctly displays the list of requests and each individual
     request

  4) finally, try to validate a request through val and see what happens

* DO NOT CONFIGURE THE SYSTEM TO DIRECTLY MODIFY THE "MASTER" ZONE FILES !
  MAKE BACKUPS !

  To take modifications into account, cd to the "zones" directory and
  use the "soa" script. It does the following:

	- runs "access-zone -u $USER -a soa ZONENAME" to update the
	  serial number in the SOA if it needs to.

	  $USER is used to check permissions and is kept in logs.

	- makes a "diff" between the current master copy and the new zone

	- renames the current master copy with a trailing ".old" and
	  replaces it with the new zone

  Check nothing's wrong in the diffs (in particular, nothing must
  disappear when it shouldn't). If ok, reload named. If not, you
  can use the .old backup to restore the zone and see what went
  wrong (it never occured to me, but you never know).

  When you feel confident that all works, you can run soa directly
  with the -r option: it causes it to restart named automatically.
