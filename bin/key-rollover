#!/usr/local/bin/python

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals

import getopt
import os
import re
import sys
import time

DNSSEC_SETTIME="/usr/local/sbin/dnssec-settime"
DNSSEC_KEYGEN="/usr/local/sbin/dnssec-keygen"

keyfilename = re.compile('^K([a-z0-9\.-]+)\.\+(\d{3})\+(\d{5}).key$')
keytimestamp = re.compile('^;\s*(Created|Publish|Activate|Revoke|Inactive|Delete):\s*(\d{14})\s+')
keyrr = re.compile('^([a-z0-9\.-]+)\.\s+(IN\s+|)DNSKEY\s+(\d+)\s+(\d+)\s+(\d+)\s+', re.IGNORECASE)
mktime_offset = time.mktime((1970, 1, 1, 0, 0, 0, 0, 0, 0))

def time_to_ymd(t):
 year, month, day, h, m, s, wd, yd, dst = time.gmtime(t)
 return '%04d%02d%02d%02d%02d%02d' % (year, month, day, h, m ,s)

def ymd_to_time(s):
  return time.mktime(
	(int(s[:4]), int(s[4:6]), int(s[6:8]),
	int(s[8:10]), int(s[10:12]), int(s[12:14]),
	0, 0, 0)) - mktime_offset


def main():
  max_zone_ttl = 86400
  dnskey_ttl = 2*86400   # -d
  reload_margin = 1800   # -r
  keygen_margin = 86400  # -g

  zsk_lifetime = 20*86400          # -I
  prepub_duration = 2*86400        # -i
  postpub_duration = max_zone_ttl  # -D
  zsk_rollover_algo = 8            # -a

  dryrun = False

  try:
      opts, args = getopt.getopt(sys.argv[1:], "a:d:D:g:i:I:nr:")
  except getopt.GetoptError:
      sys.exit(1)

  for o, a in opts:
      if o == "-a":
          key_rollover_algo = int(a)
      elif o == "-d":
          dnskey_ttl = int(a)
      elif o == "-D":
          postpub_duration = int(a)
      elif o == "-i":
          prepub_duration = int(a)
      elif o == "-I":
          key_lifetime = int(a)
      elif o == "-g":
          keygen_margin = int(a)
      elif o == "-r":
          reload_margin = int(a)
      elif o == "-n":
          dryrun = True

  domargs = []
  for adom in args:
    domargs.append(adom.lower())

  domains = {}
  activate = {}
  active = []
  publish = []

  year, month, day, h, m, s, wd, yd, dst = time.gmtime()
  nowu = time.time()
  now = time_to_ymd(nowu)

  for f in os.listdir('.'):
    m = keyfilename.match(f)
    if not m:
      continue
    keyname = "K%s.+%s+%s" % m.groups()

    dom, algo, keyid = m.groups()
    if dom not in domargs:
      continue

    algo = int(algo)
    keyid = int(keyid)
    keytimes = {}
    for line in open(f):
      m = keytimestamp.match(line)
      if not m:
        m = keyrr.match(line)
        if not m:
          continue
        keytimes['flags'] = int(m.groups()[2])
      else:
        g = m.groups()
        keytimes[g[0]] = g[1]
    if keytimes['flags'] & 1:
      # Key is a KSK
      ksk = True
    else:
      ksk = False
    if dom not in domains:
      domains[dom] = {}
    if 'Delete' in keytimes and keytimes['Delete'] < now:
      continue
    if 'Activate' not in keytimes:
      if not ksk:
        print("No active date set for", dom, algo, keyid)
        keytimes['Activate'] = now
        cmd  = DNSSEC_SETTIME + " -A%s %s" % (keytimes['Activate'], keyname)
        if not dryrun:
          os.system(cmd)
    if 'Inactive' not in keytimes:
      if keytimes['Activate'] <= now:
        active.append((dom, algo, keyid))
      if ('Publish' not in keytimes or keytimes['Publish'] <= now) \
          and ('Delete' not in keytimes or keytimes['Delete'] > now):
        publish.append((dom, algo, keyid))
      if not ksk and ymd_to_time(keytimes['Activate']) \
        + zsk_lifetime - max(dnskey_ttl, prepub_duration) \
        - keygen_margin < nowu:
        oldact = ymd_to_time(keytimes['Activate'])
        oldina = max(oldact + zsk_lifetime,
                     nowu + prepub_duration + reload_margin,
                     nowu + dnskey_ttl + reload_margin)
        olddel = oldina + postpub_duration
        oldina = time_to_ymd(oldina)
        olddel = time_to_ymd(olddel)
        print(keyname, "has no successor at %s, creating one" % oldina)
        cmd = DNSSEC_SETTIME + " -I%s -D%s %s" % (oldina, olddel, keyname)
        if not dryrun:
          os.system(cmd)
        cmd = DNSSEC_KEYGEN + " -i%d -S %s" % (prepub_duration, keyname)
        if not dryrun:
          os.system(cmd)
    elif keytimes['Inactive'] > now:
      if keytimes['Activate'] <= now:
        active.append((dom, algo, keyid))
      if ('Publish' not in keytimes or keytimes['Publish'] <= now) \
          and ('Delete' not in keytimes or keytimes['Delete'] > now):
        publish.append((dom, algo, keyid))
    domains[dom][algo, keyid] = keytimes

  print("Active:", active)
  print("Publish:", publish)

  sys.exit(0)

if __name__ == "__main__":
  main()
